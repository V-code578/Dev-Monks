EFUserRepo.cs
using Microsoft.EntityFrameworkCore;
using OnlineShopping.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace OnlineShopping.Repos
{
    public class EFUserRepo : IUserRepo
    {
        private readonly OnlineShoppingDbContext _ctx;

        public EFUserRepo(OnlineShoppingDbContext ctx)
        {
            _ctx = ctx;
        }

        public async Task<User> Login(string username, string password)
        {
            try
            {
                User loggedInUser = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == username && u.Password == password);
                return loggedInUser;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}
UserController.cs:
using Microsoft.AspNetCore.Mvc;
using OnlineShopping.Models;
using OnlineShopping.Repos;
using System;
using System.Threading.Tasks;

namespace webapi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserRepo _userRepo;

        public UserController(IUserRepo repo)
        {
            _userRepo = repo;
        }

        [HttpPost("Login")]
        public async Task<ActionResult> Login(User user)
        {
            try
            {
                User loggedInUser = await _userRepo.Login(user.UserName, user.Password);
                if (loggedInUser != null)
                {
                    if (loggedInUser.UserName == "admin")
                    {
                        // Login as admin
                        return Ok("Logged in as admin");
                    }
                    else
                    {
                        // Login as normal user
                        return Ok("Logged in as a normal user");
                    }
                }
                else
                {
                    return Unauthorized("Invalid credentials");
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}
LoginPage.jsx:
import React, { useState } from "react";
import { Form, FormGroup, Label, Input, Button } from "reactstrap";

const LoginPage = () => {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [message, setMessage] = useState("");

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            const response = await fetch("http://localhost:5183/api/user/Login", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ UserName: username, Password: password }),
            });

            if (!response.ok) {
                throw new Error("Invalid credentials");
            }

            const data = await response.text();
            setMessage(data);
        } catch (error) {
            setMessage(error.message);
        }
    };

    return (
        <div className="container">
            <div className="row">
                <div className="col-md-6 offset-md-3">
                    <Form onSubmit={handleSubmit}>
                        <FormGroup>
                            <Label for="username">Username</Label>
                            <Input
                                type="text"
                                name="username"
                                id="username"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                required
                            />
                        </FormGroup>
                        <FormGroup>
                            <Label for="password">Password</Label>
                            <Input
                                type="password"
                                name="password"
                                id="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required
                            />
                        </FormGroup>
                        <Button color="primary" type="submit">
                            Login
                        </Button>
                        {message && <p style={{ color: 'green' }}>{message}</p>}
                    </Form>
                </div>
            </div>
        </div>
    );
};

export default LoginPage;



