User.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Models
{
    [Table("User")]
    public class User
    {
        
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }    
        [Key]
        [Required]
        [StringLength(30)]
        public string UserName { get; set; }

        [Required]
        [StringLength(40)]
        public string Email { get; set; }
        [Required]
        [StringLength(15)]
        public string Password { get; set; }

        public virtual ICollection<Cart> Carts { get; set; }
        public virtual ICollection<WishList> WishLists { get; set; }
        public virtual ICollection<Order> Orders { get; set; }

        public User()
        {
            Carts = new HashSet<Cart>();
            WishLists = new HashSet<WishList>();
            Orders = new HashSet<Order>();
        }

    }
}

EFUserRepo.cs:
using Microsoft.EntityFrameworkCore;
using OnlineShopping.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Repos
{
    public class EFUserRepo : IUserRepo
    {
        private readonly OnlineShoppingDbContext _ctx;

        public EFUserRepo(OnlineShoppingDbContext ctx)
        {
            _ctx = ctx;
        }

        public async Task DeleteUser(int id)
        {
            try
            {
                User user = await GetUserById(id);
                _ctx.Users.Remove(user);
                await _ctx.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task ForgotPassword(User user, string newPassword)
        {
            try
            {
                User existingUser = await GetUserById(user.Id);
                if (existingUser != null)
                {
                    // Update the password for the user
                    existingUser.Password = newPassword;
                    await _ctx.SaveChangesAsync();
                }
                else
                {
                    throw new Exception("User not found");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<List<User>> GetAllUsers()
        {
            try
            {
                List<User> users = await _ctx.Users.ToListAsync();
                return users;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> GetUserById(int id)
        {
            try
            {
                User user = await _ctx.Users.FirstOrDefaultAsync(u => u.Id == id);
                return user;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> GetUserByUsername(string username)
        {
            try
            {
                User user = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == username);
                return user;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> Login(string username, string password)
        {
            try
            {
                User loggedInUser = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == username && u.Password == password);
                return loggedInUser;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task Logout(User user)
        {
            // Implement logout logic here
            throw new NotImplementedException();
        }

        public async Task Register(User user)
        {
            try
            {
                _ctx.Users.Add(user);
                await _ctx.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}
UserController.cs:
using Microsoft.EntityFrameworkCore;
using OnlineShopping.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OnlineShopping.Repos
{
    public class EFUserRepo : IUserRepo
    {
        private readonly OnlineShoppingDbContext _ctx;

        public EFUserRepo(OnlineShoppingDbContext ctx)
        {
            _ctx = ctx;
        }

        public async Task DeleteUser(int id)
        {
            try
            {
                User user = await GetUserById(id);
                _ctx.Users.Remove(user);
                await _ctx.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task ForgotPassword(User user, string newPassword)
        {
            try
            {
                User existingUser = await GetUserById(user.Id);
                if (existingUser != null)
                {
                    // Update the password for the user
                    existingUser.Password = newPassword;
                    await _ctx.SaveChangesAsync();
                }
                else
                {
                    throw new Exception("User not found");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<List<User>> GetAllUsers()
        {
            try
            {
                List<User> users = await _ctx.Users.ToListAsync();
                return users;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> GetUserById(int id)
        {
            try
            {
                User user = await _ctx.Users.FirstOrDefaultAsync(u => u.Id == id);
                return user;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> GetUserByUsername(string username)
        {
            try
            {
                User user = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == username);
                return user;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<User> Login(string username, string password)
        {
            try
            {
                User loggedInUser = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == username && u.Password == password);
                return loggedInUser;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task Logout(User user)
        {
            // Implement logout logic here
            throw new NotImplementedException();
        }

        public async Task Register(User user)
        {
            try
            {
                _ctx.Users.Add(user);
                await _ctx.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }
}
LoginPage.JSX:
import React, { useState } from "react";
import { Form, FormGroup, Label, Input, Button } from "reactstrap";
import axios from "axios";

const LoginPage = () => {
    // State variables to store the username and password
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");

    // Function to handle the form submission
    const handleSubmit = (e) => {
        e.preventDefault();

        // Create a user object with the username and password
        const user = {
            username,
            password,
        };

        // Send the user object to the web API
        axios
            .post("http://localhost:5183/api/user/login", user)
            .then((response) => {
                // If the login is successful, redirect to the home page
                window.location.href = "/";
            })
            .catch((error) => {
                // If the login fails, display an error message
                alert("Invalid credentials");
            });
    };

    return (
        <div className="container">
            <div className="row">
                <div className="col-md-6 offset-md-3">
                    <Form onSubmit={handleSubmit}>
                        <FormGroup>
                            <Label for="username">Username</Label>
                            <Input
                                type="text"
                                name="username"
                                id="username"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                required
                            />
                        </FormGroup>
                        <FormGroup>
                            <Label for="password">Password</Label>
                            <Input
                                type="password"
                                name="password"
                                id="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required
                            />
                        </FormGroup>
                        <Button color="primary" type="submit">
                            Login
                        </Button>
                    </Form>
                </div>
            </div>
        </div>
    );
};

export default LoginPage;
By using User.cs, EFUserRepo.cs, UserController.cs files, please correct the LoginPage.JSX to logged in successfully by calling web api.